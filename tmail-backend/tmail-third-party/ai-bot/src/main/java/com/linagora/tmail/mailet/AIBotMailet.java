/********************************************************************
 *  As a subpart of Twake Mail, this file is edited by Linagora.    *
 *                                                                  *
 *  https://twake-mail.com/                                         *
 *  https://linagora.com                                            *
 *                                                                  *
 *  This file is subject to The Affero Gnu Public License           *
 *  version 3.                                                      *
 *                                                                  *
 *  https://www.gnu.org/licenses/agpl-3.0.en.html                   *
 *                                                                  *
 *  This program is distributed in the hope that it will be         *
 *  useful, but WITHOUT ANY WARRANTY; without even the implied      *
 *  warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR         *
 *  PURPOSE. See the GNU Affero General Public License for          *
 *  more details.                                                   *
 ********************************************************************/

package com.linagora.tmail.mailet;

import java.io.IOException;
import java.util.Arrays;
import java.util.Collection;
import java.util.Date;
import java.util.List;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ExecutionException;
import java.util.stream.Stream;

import jakarta.inject.Inject;
import jakarta.mail.Address;
import jakarta.mail.Message;
import jakarta.mail.MessagingException;
import jakarta.mail.internet.InternetAddress;
import jakarta.mail.internet.MimeMessage;

import org.apache.james.core.MailAddress;
import org.apache.james.core.MaybeSender;
import org.apache.james.mime4j.codec.DecodeMonitor;
import org.apache.james.mime4j.message.DefaultMessageBuilder;
import org.apache.james.mime4j.stream.MimeConfig;
import org.apache.james.server.core.MimeMessageInputStream;
import org.apache.james.util.html.HtmlTextExtractor;
import org.apache.james.util.mime.MessageContentExtractor;
import org.apache.mailet.Mail;
import org.apache.mailet.base.GenericMailet;

import com.github.fge.lambdas.Throwing;
import com.google.common.base.Strings;
import com.google.common.collect.ImmutableList;


import dev.langchain4j.data.message.ChatMessage;
import dev.langchain4j.data.message.SystemMessage;
import dev.langchain4j.data.message.UserMessage;
import dev.langchain4j.model.StreamingResponseHandler;
import dev.langchain4j.model.chat.StreamingChatLanguageModel;
import dev.langchain4j.model.output.Response;


/**
 * <b>AIBotMailet</b> is a mailet designed to automatically reply to emails sent to a specific recipient
 * (e.g., gpt@linagora.com). It uses the OpenAI API by default but can be configured to use any LLM
 * API supported by <a href="https://github.com/langchain4j/">langchain4j</a>.
 *
 * <p>
 * Configuration example:
 *
 * <pre>
 * {@code
 * <mailet match="com.linagora.tmail.mailet.RecipientsContain=gpt@tmail.com" class="com.linagora.tmail.mailet.AIBotMailet">
 *     <apiKey>{put you api key here}</apiKey>
 *     <botAddress>gpt@tmail.com</botAddress>
 *     <model>linagoras-chitchat</model>
 *     <baseURL>https://ai.linagora.com/api</baseURL>
 * </mailet>
 * }
 * </pre>
 * </p>
 *
 * <p>
 * The mailet configuration should include the following parameters:
 * </p>
 * <ul>
 * <li><b>apiKey</b>: The API key for accessing the LLM API service.</li>
 * <li><b>botAddress</b>: The email address used to send replies generated by the LLM model.</li>
 * <li><b>baseURL</b>: The URL of an LLM API compatible with OpenAI .e.g. <code>https://ai.linagora.com/api</code>. Optional. Defaults to the official OpenAI API base url.</li>
 * <li><b>model</b>: The OpenAI LLM model to be used. Optional. Defaults to <b>gpt-3.5-turbo</b> by langchain4j. You can use the <b>gpt-4o-mini</b> model and <b>demo</b> API key for testing purpose.
 * </ul>
 */
public class AIBotMailet extends GenericMailet {
    private final HtmlTextExtractor htmlTextExtractor;
    private AIBotConfig config;
    private StreamingChatLanguageModel chatLanguageModel;

    @Inject
    public AIBotMailet(AIBotConfig aiBotConfig, StreamingChatLanguageModel chatLanguageModel, HtmlTextExtractor htmlTextExtractor) {
        this.config = aiBotConfig;
        this.chatLanguageModel = chatLanguageModel;
        this.htmlTextExtractor = htmlTextExtractor;
    }

    @Override
    public void service(Mail mail) {
        if (botLoopDetected(mail)) {
            return;
        }

        try {
            String llmAnswer = askChatLanguageModel(mail);
            MimeMessage replyMimeMessage = evaluateReplyMimeMessage(mail, llmAnswer);

            getMailetContext()
                .sendMail(config.getBotAddress(), evaluateRecipients(mail), replyMimeMessage);
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

    private boolean botLoopDetected(Mail mail) {
        return mail.getMaybeSender().equals(MaybeSender.of(config.getBotAddress()));
    }

    private String askChatLanguageModel(Mail mail) throws IOException, MessagingException, InterruptedException, ExecutionException {
        ChatMessage systemMessage = new SystemMessage("You are a helpful mailing chatbot. Respond to the following email as a chatbot, not as the recipient. ");
        ChatMessage userMessage = new UserMessage(evaluatePrompt(mail));
        List<ChatMessage> messages = ImmutableList.of(systemMessage, userMessage);
        CompletableFuture<String> future = new CompletableFuture<>();

        chatLanguageModel.generate(messages, new StreamingResponseHandler() {
            StringBuilder result = new StringBuilder();

            @Override
            public void onNext(String token) {
                result.append(token);
            }

            @Override
            public void onComplete(Response response) {
                future.complete(result.toString());
            }

            @Override
            public void onError(Throwable error) {
                future.completeExceptionally(error);
            }
        });
        return future.get();
    }

    private String evaluatePrompt(Mail mail) throws IOException, MessagingException {
        MessageContentExtractor.MessageContent askingMessageContent = extractMessageContent(mail);
        Optional<String> content = askingMessageContent.extractMainTextContent(htmlTextExtractor);

        return Strings.nullToEmpty(mail.getMessage().getSubject()) + "\n" + content.orElse("");
    }

    private MessageContentExtractor.MessageContent extractMessageContent(Mail mail) throws IOException, MessagingException {
        DefaultMessageBuilder defaultMessageBuilder = new DefaultMessageBuilder();
        defaultMessageBuilder.setMimeEntityConfig(MimeConfig.PERMISSIVE);
        defaultMessageBuilder.setDecodeMonitor(DecodeMonitor.SILENT);
        return new MessageContentExtractor().extract(defaultMessageBuilder.parseMessage(new MimeMessageInputStream(mail.getMessage())));
    }

    private MimeMessage evaluateReplyMimeMessage(Mail mail, String answer) throws MessagingException {
        MimeMessage reply = (MimeMessage) mail.getMessage()
            .reply(true);

        stripBotFromRecipients(reply, Message.RecipientType.TO);
        stripBotFromRecipients(reply, Message.RecipientType.CC);
        stripBotFromRecipients(reply, Message.RecipientType.BCC);

        reply.setSentDate(new Date());
        reply.setFrom(config.getBotAddress().asString());
        reply.setText(answer);

        return reply;
    }

    private void stripBotFromRecipients(MimeMessage reply, Message.RecipientType recipientType) throws MessagingException {
        Address[] toAddresses =
            Arrays.stream(Optional.ofNullable(reply.getRecipients(recipientType))
                    .orElse(new InternetAddress[0]))
                .filter(Throwing.predicate(address -> !address.equals(
                    new InternetAddress(config.getBotAddress().asString()))))
                .toArray(Address[]::new);
        reply.setRecipients(recipientType, toAddresses);
    }

    private List<MailAddress> evaluateRecipients(Mail mail) {
        return Stream.of(mail.getMaybeSender().asList(), mail.getRecipients())
            .flatMap(Collection::stream)
            .filter(recipient -> !recipient.equals(config.getBotAddress()))
            .toList();
    }

    @Override
    public String getMailetName() {
        return "AIBotMailet";
    }
}